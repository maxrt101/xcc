extern fn printf(fmt: i8*, ...): i32;
extern fn malloc(size: u32): u8*;
extern fn free(ptr: u8*): void;
extern fn strlen(ptr: u8*): u32;

struct buffer_t {
  data: i8*;
  size: u32;
}

struct context_t {
  status: u32;
  buf: buffer_t;
}

fn memcopy(dest: i8*, src: i8*, size: u32): u32 {
  for (var i: u32 = 0; i < size; i = i + 1) {
    dest[i] = src[i];
  }
  return 0;
}

fn context_init(ctx: context_t*, str: i8*): u8 {
  ctx->buf.size = strlen(str) + 1;
  ctx->buf.data = malloc(ctx->buf.size);

  memcopy(ctx->buf.data, str, ctx->buf.size);

  ctx->status = 1;

  return 0;
}

fn context_deinit(ctx: context_t *): u8 {
  if (ctx->buf.data != 0) {
    free(ctx->buf.data);
  }

  return 0;
}

fn main(): i32 {
  var s: context_t;

  s.status = 0;

  context_init(&s, "Hello, World!");

  if (s.status == 1) {
    printf("%d %p '%s'\n", s.buf.size, s.buf.data, s.buf.data);
  } else {
    printf("Context is in an invalid state!\n");
  }

  context_deinit(&s);

  return 0;
}
