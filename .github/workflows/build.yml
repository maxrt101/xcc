name: Build XCC

on:
  push:
    branches: [ "master" ]
    paths:
      - '**.cc'
      - '**.h'
  pull_request:
    branches: [ "master" ]
    paths:
      - '**.cc'
      - '**.h'
  workflow_dispatch:
    inputs:
      features:
        description: "Space-separated list of key-value feature toggles"
        required: false
      omit_tests:
        description: "Omit tests"
        required: false
      tests_verbose:
        description: "Run testrunner with verbose flag"
        required: false
      tests_print_output:
        description: "Run testrunner with print output (stdout/stderr) flag"
        required: false

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.x'

#    - name: Add LLVM unstable dev repo
#      uses: myci-actions/add-deb-repo@11
#      with:
#        repo: |
#          deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
#          deb-src http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
#        repo-name: llvm-toolchain-noble-20
#        key-url: https://apt.llvm.org/llvm-snapshot.gpg.key

#    - name: Install LLVM and Clang
#      run: |
#        deb http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
#        deb-src http://apt.llvm.org/noble/ llvm-toolchain-noble-20 main
#        apt install llvm-toolchain-20 llvm-20-dev

#    - uses: gerlero/add-apt-repository@v1
#      with:
#        uri: https://apt.llvm.org/noble
#        key: https://apt.llvm.org/noble/dists/llvm-toolchain-noble-20/Release.gpg
#    - uses: gerlero/apt-install@v1
#      with:
#        packages: llvm-toolchain-20 llvm-20-dev
    - name: Install LLVM & Clang
      run: |
        wget https://apt.llvm.org/llvm.sh
        chmod +x llvm.sh
        sudo ./llvm.sh 20

    - name: Configure
      run: |
        ARGS=""
        if [ -n "${{ inputs.features }}" ]; then
            for feature in ${{ inputs.features }}
            do
              ARGS="$ARGS -D$feature"
            done
        fi
        
        cmake -B build -S . -G "Unix Makefiles" $ARGS
      env:
        CC: clang
        CXX: clang++

    - name: Build
      run: cmake --build build --target xcc

    - name: Run tests
      run: |
        ARGS=""
        if [ -n "${{ inputs.tests_verbose }}" ]; then
            ARGS="$ARGS -v"
        fi
        if [ -n "${{ inputs.tests_print_output }}" ]; then
            ARGS="$ARGS -p"
        fi
        if [ -z "${{ inputs.omit_tests }}" ]; then
          python3 -c tests/tests.json -e build/xcc $ARGS
        else
          echo "Omit tests"
        fi

    - name: Archive executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: xcc-linux
        path: build/xcc
