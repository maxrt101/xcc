name: Build XCC

on:
  push:
    branches: [ "master" ]
    paths:
      - '**.cc'
      - '**.h'
  pull_request:
    branches: [ "master" ]
    paths:
      - '**.cc'
      - '**.h'
  workflow_dispatch:
    inputs:
      omit_tests:
        description: "Omit tests"
        required: false
      tests_verbose:
        description: "Run testrunner with verbose flag"
        required: false
      tests_print_output:
        description: "Run testrunner with print output (stdout/stderr) flag"
        required: false
      optimization:
        description: USE_OPTIMIZATION
        required: false
      catch_exceptions:
        description: USE_CATCH_EXCEPTIONS
        required: false
      print_tokens:
        description: USE_PRINT_TOKENS
        required: false
      print_ast:
        description: USE_PRINT_AST
        required: false
      print_llvm_ir:
        description: USE_PRINT_LLVM_IR
        required: false
      print_expr_result:
        description: USE_PRINT_EXPR_RESULT
        required: false
      print_llvm_ir_on_verify_fail:
        description: USE_PRINT_LLVM_IR_ON_VERIFY_FAIL
        required: false
      dump_jit_state:
        description: USE_DUMP_JIT
        required: false
      report_symbol_resolver_success:
        description: USE_REPORT_SYMBOL_RESOLVER_SUCCESS
        required: false
      use_legacy_extern_functions:
        description: USE_LEGACY_XCC_EXTERN_FUNCTIONS
        required: false

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
    - uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Setup CMake
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.28.x'

    - name: Install LLVM and Clang
      uses: KyleMayes/install-llvm-action@v2
      with:
        version: "20.1.4"

    - name: Configure
      run: |
        ARGS=""
        if [ -n "${{ inputs.optimization }}" ]; then
            ARGS="$ARGS -DUSE_OPTIMIZATION=${{ inputs.optimization }}"
        fi
        if [ -n "${{ inputs.catch_exceptions }}" ]; then
            ARGS="$ARGS -DUSE_CATCH_EXCEPTIONS=${{ inputs.catch_exceptions }}"
        fi
        if [ -n "${{ inputs.print_tokens }}" ]; then
            ARGS="$ARGS -DUSE_PRINT_TOKENS=${{ inputs.print_tokens }}"
        fi
        if [ -n "${{ inputs.print_ast }}" ]; then
            ARGS="$ARGS -DUSE_PRINT_AST=${{ inputs.print_ast }}"
        fi
        if [ -n "${{ inputs.print_llvm_ir }}" ]; then
            ARGS="$ARGS -DUSE_PRINT_LLVM_IR=${{ inputs.print_llvm_ir }}"
        fi
        if [ -n "${{ inputs.print_expr_result }}" ]; then
            ARGS="$ARGS -DUSE_PRINT_EXPR_RESULT=${{ inputs.print_expr_result }}"
        fi
        if [ -n "${{ inputs.print_llvm_ir_on_verify_fail }}" ]; then
            ARGS="$ARGS -DUSE_PRINT_LLVM_IR_ON_VERIFY_FAIL=${{ inputs.print_llvm_ir_on_verify_fail }}"
        fi
        if [ -n "${{ inputs.dump_jit_state }}" ]; then
            ARGS="$ARGS -DUSE_DUMP_JIT=${{ inputs.dump_jit_state }}"
        fi
        if [ -n "${{ inputs.report_symbol_resolver_success }}" ]; then
            ARGS="$ARGS -DUSE_REPORT_SYMBOL_RESOLVER_SUCCESS=${{ inputs.report_symbol_resolver_success }}"
        fi
        if [ -n "${{ inputs.use_legacy_extern_functions }}" ]; then
            ARGS="$ARGS -DUSE_LEGACY_XCC_EXTERN_FUNCTIONS=${{ inputs.use_legacy_extern_functions }}"
        fi
        cmake -B build -S . -G "Unix Makefiles" $ARGS
      env:
        CC: clang
        CXX: clang++

    - name: Build
      run: cmake --build build --target xcc

    - name: Run tests
      run: |
        ARGS=""
        if [ -n "${{ inputs.tests_verbose }}" ]; then
            ARGS="$ARGS -v"
        fi
        if [ -n "${{ inputs.tests_print_output }}" ]; then
            ARGS="$ARGS -p"
        fi
        if [ -z "${{ inputs.omit_tests }}" ]; then
          python3 -c tests/tests.json -e build/xcc $ARGS
        else
          echo "Omit tests"
        fi

    - name: Archive executable artifact
      uses: actions/upload-artifact@v4
      with:
        name: xcc-linux
        path: build/xcc
